1, 输入一颗二叉树的根节点，判断该树是不是平衡二叉树。

2，用单链表实现归并排序算法
#include <iostream> 
using namespace std;  
struct node {   
  int data;   
  struct node* next;  
  node(int x):data(x),next(NULL){} 
}

void sort(node *head) {
}

3，c++求无序数组中位数

4，给定一个整数数组，求a[i] + a[j] + i - j的最大值


5，快速排序
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <time.h>
#include <sys/time.h>
#include <unistd.h>

class UtilTimes{
  public:
    UtilTimes() {
      gettimeofday(&tv_, NULL);
    }   
    ~UtilTimes() {
      struct timeval now;
      gettimeofday(&now, NULL);
      int64_t interval = (now.tv_sec - tv_.tv_sec) * 1000000 + (now.tv_usec - tv_.tv_usec);
      printf("ut:%ld\n", interval);
    }   
  private:
    struct timeval tv_;
};
void Qsort(int arr[], int low, int high){
  if (high <= low) return;
  int i = low;
  int j = high;
  int key = arr[low];
  while (true)
  {
    /*从左向右找比key大的值*/
    while (arr[i] <= key)
    {
      i++;
      if (i == high){
        break;
      }
    }
    /*从右向左找比key小的值*/
    while (arr[j] >= key)
    {
      j--;
      if (j == low){
        break;
      }
    }
    if (i >= j) break;
    /*交换i,j对应的值*/
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
  /*中枢值与j对应值交换*/
  arr[low] = arr[j];
  arr[j] = key;
  Qsort(arr, low, j - 1);
  Qsort(arr, j + 1, high);
}
int main(int argc, char *argv[]) {
  int arr[] = {5,8,9,10,2,15,1,0,32,19,4,6,7,8,11, 3, 109, 45, 198, 1, 200, 291, 111, 23, 45, 98, 12, 456, 112, 231};
  int len = sizeof(arr)/sizeof(int);
  int times = 1;
  int *pArr = new int(len);
  {
    UtilTimes ut;
    for(int i=0; i<times; i++) {
      memcpy(pArr, arr, sizeof(arr));
      Qsort(pArr, 0, len-1);
      p(pArr, len);
    }
  }
  return 0;
}
